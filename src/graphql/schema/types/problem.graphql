# import User from "../types/user.graphql"
# import ProblemDifficulty from "../enums/global_enums.graphql"
# import SubmissionStatus from "../enums/global_enums.graphql"
# import PageInfo from "../types/common.graphql"

type Problem {
  id: ID!
  title: String
  slug: String
  description: String
  createdById: ID
  timeLimitInSeconds: Int
  memoryLimitInMB: Int
  views: Int
  acceptedSubmissions: Int
  totalSubmissions: Int
  difficulty: ProblemDifficulty
  createdBy: User
  likes: Int
  dislikes: Int
  bookmarks: Int

  examples: [Example]
  solutions: [Solution]
  userSolutions: [UserSolution]
  hints: [Hint]
  topics: [Topic]
  editorial: Editorial
  discussions: [Discussion]
}

type GetAllProblemsResponse {
  edges: [Problem]
  pageInfo: PageInfo
}

type Hint {
  id: ID!
  content: String
  problemId: ID
}

type Topic {
  id: ID!
  name: String
  description: String
  problems: [Problem]
}

type Example {
  id: ID!
  input: String
  output: String
  explanation: String
  problemId: ID
}

type Solution {
  id: ID!
  code: String
  language: String
  problemId: ID
  createdAt: DateTime
}

type Submission {
  id: ID!
  userId: ID
  problemId: ID
  code: String
  language: String
  status: SubmissionStatus
  verdict: Boolean
  createdAt: DateTime
  user: User
}

type UserSolution {
  id: ID!
  authorId: ID
  problemId: ID
  title: String
  content: String
  views: Int
  user: User
  problem: Problem
  likes: Int
  dislikes: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Editorial {
  id: ID!
  title: String
  content: String
  problemId: ID
  views: Int
  problem: Problem
  likes: Int
  dislikes: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type Discussion {
  id: ID!
  problemId: ID
  content: String
  userId: ID
  user: User
  problem: Problem
  parent: Discussion
  replies: [Discussion]
  createdAt: DateTime
  updatedAt: DateTime
}

scalar DateTime
