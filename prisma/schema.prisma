// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  role           Role      @default(USER)

  accounts                Account[]
  sessions                Session[]
  problems                Problem[]
  interactedProblems      ProblemInteraction[]
  bookmarkedProblems      BookmarkedProblem[]
  submissions             Submission[]
  userSolutions           UserSolution[]
  dailySubmissionCounts   DailySubmissionCount[]
  submissionStreaks       SubmissionStreak[]
  discussions             Discussion[]
  editorialInteraction    EditorialInteraction[]
  userSolutionInteraction UserSolutionInteraction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  MODERATOR
  ADMIN
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Problem {
  id                  String  @id @default(cuid())
  title               String
  slug                String  @unique
  description         String
  createdById         String?
  timeLimitInSeconds  Int
  memoryLimitInMB     Int
  views               Int     @default(0)
  acceptedSubmissions Int     @default(0)
  totalSubmissions    Int     @default(0)

  difficulty         Difficulty
  examples           Example[]
  createdBy          User?                @relation(fields: [createdById], references: [id])
  solutions          Solution[]
  submissions        Submission[]
  userSolutions      UserSolution[]
  hints              Hint[]
  topics             Topic[]
  editorial          Editorial?
  discussions        Discussion[]
  problemInteraction ProblemInteraction[]
  bookmarkedProblems BookmarkedProblem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Hint {
  id        String @id @default(cuid())
  content   String
  problemId String

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Topic {
  id          String    @id @default(cuid())
  name        String
  description String
  problems    Problem[]

  @@unique([name])
}

model ProblemInteraction {
  id        String  @id @default(cuid())
  userId    String
  problemId String
  like      Boolean

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model BookmarkedProblem {
  id        String @id @default(cuid())
  userId    String
  problemId String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Example {
  id        String @id @default(cuid())
  input     String
  output    String
  problemId String

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Solution {
  id        String @id @default(cuid())
  code      String
  language  String
  problemId String

  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Submission {
  id        String           @id @default(cuid())
  userId    String
  problemId String
  code      String
  language  String
  status    SubmissionStatus
  verdict   Boolean?
  createdAt DateTime         @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model UserSolution {
  id        String  @id @default(cuid())
  authorId  String?
  problemId String
  title     String
  content   String
  views     Int     @default(0)

  author                  User?                     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  problem                 Problem                   @relation(fields: [problemId], references: [id], onDelete: Cascade)
  userSolutionInteraction UserSolutionInteraction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Editorial {
  id        String @id @default(cuid())
  problemId String @unique
  content   String
  views     Int    @default(0)

  problem              Problem                @relation(fields: [problemId], references: [id], onDelete: Cascade)
  editorialInteraction EditorialInteraction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Discussion {
  id        String  @id @default(cuid())
  problemId String
  userId    String
  content   String
  parentId  String? // For threading

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem     @relation(fields: [problemId], references: [id], onDelete: Cascade)
  parent  Discussion? @relation("DiscussionThread", fields: [parentId], references: [id], onDelete: SetNull)

  replies Discussion[] @relation("DiscussionThread")

  createdAt DateTime @default(now())
}

model DailySubmissionCount {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  count     Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model SubmissionStreak {
  id        String   @id @default(cuid())
  userId    String
  startDate DateTime
  endDate   DateTime
  count     Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, startDate])
}

model EditorialInteraction {
  id          String  @id @default(cuid())
  editorialId String
  userId      String
  liked       Boolean

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  editorial Editorial @relation(fields: [editorialId], references: [id], onDelete: Cascade)

  @@unique([userId, editorialId])
}

model UserSolutionInteraction {
  id             String  @id @default(cuid())
  userSolutionId String
  userId         String
  liked          Boolean

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userSolution UserSolution @relation(fields: [userSolutionId], references: [id], onDelete: Cascade)

  @@unique([userId, userSolutionId])
}

enum SubmissionStatus {
  PENDING
  JUDGING
  ACCEPTED
  WRONG_ANSWER
  RUNTIME_ERROR
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  COMPILATION_ERROR
  INTERNAL_ERROR
}
